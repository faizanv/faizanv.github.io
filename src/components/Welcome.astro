---
import headshot from "../assets/headshot.png";
import Links from "./Links.astro";
---

<main>
  <img
    id="headshot"
    src={headshot.src}
    alt="headshot image of Faizan Virani"
    fetchpriority="low"
    height="250"
  />
  <section id="hero">
    <h1>
      Looking for <code class="bouncing-icon"><pre>Faizan Virani</pre></code>?
    </h1>
    <ul class="description-list">
      <li><span class="bouncing-icon">üìç</span> He(Him)'s in New York</li>
      <li>
        <span class="bouncing-icon">üíº</span> Senior Software Engineer for all your
        fullstack needs
      </li>
      <li>
        <span class="bouncing-icon">üëÄ</span> Looking for a job <a
          href="https://www.linkedin.com/in/faizanv/"
          target="_blank"
          rel="noopener">(my LinkedIn)</a
        >
      </li>
      <li>
        <span class="bouncing-icon">üéµ</span> Also makes music <a
          href="https://soundcloud.com/faizanv"
          target="_blank"
          rel="noopener">(soundcloud)</a
        >
      </li>
      <li id="mobile-surprise">(open on mobile for a surprise)</li>
    </ul>
    <button type="button" id="enable-rotation">
      Click here to activate party mode
    </button>
  </section>
  <Links />
</main>

<style>
  main {
    height: 100%;
    display: flex;
    justify-content: center;
    flex-direction: row;
    align-items: center;
    gap: 8px;

    @media screen and ((max-width: 768px) or (max-height: 500px)) {
      flex-direction: column;
    }
  }

  #hero {
    display: flex;
    align-items: start;
    flex-direction: column;
    justify-content: center;
    padding: 16px;
  }

  #headshot {
    transform: 0.1s ease-out;
  }

  h1 {
    margin-block: 0.67em;
    font-size: 2em;

    @media screen and ((max-width: 768px) or (max-height: 500px)) {
      width: 100%;
      text-align: center;
    }
  }

  .description-list {
    list-style: none;
    padding: 0px;
    margin: 0px;
    display: flex;
    flex-direction: column;
    gap: 16px;

    font-size: 18px;
  }

  pre {
    font-family: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo,
      Consolas, "DejaVu Sans Mono", monospace;
    font-weight: normal;
    background: linear-gradient(14deg, #d83333 0%, #f041ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0;
  }

  code {
    display: inline-block;
    background:
      linear-gradient(66.77deg, #f3cddd 0%, #f5cee7 100%) padding-box,
      linear-gradient(155deg, #d83333 0%, #f041ff 18%, #f5cee7 45%) border-box;
    border-radius: 8px;
    border: 1px solid transparent;
    padding: 8px;
    margin-right: 4px;
  }

  .box {
    padding: 16px;
    background: rgba(255, 255, 255, 1);
    border-radius: 16px;
    border: 1px solid white;
  }

  .bouncing-icon {
    display: inline-block;
    animation: hithere 1.5s ease 1;
  }
  @keyframes hithere {
    30% {
      transform: scale(1.2);
    }
    40%,
    60% {
      transform: rotate(-20deg) scale(1.2);
    }
    50% {
      transform: rotate(20deg) scale(1.2);
    }
    70% {
      transform: rotate(0deg) scale(1.2);
    }
    100% {
      transform: scale(1);
    }
  }

  .description-list li:nth-child(1) .bouncing-icon {
    animation-delay: 1s;
  }
  .description-list li:nth-child(2) .bouncing-icon {
    animation-delay: 2s;
  }
  .description-list li:nth-child(3) .bouncing-icon {
    animation-delay: 3s;
  }
  .description-list li:nth-child(4) .bouncing-icon {
    animation-delay: 4s;
  }

  #enable-rotation {
    display: none;

    @media screen and ((max-width: 768px) or (max-height: 500px)) {
      display: block;
      margin-top: 16px;
      padding: 4px 8px;
      color: white;
      border-radius: 100px;
      font-size: 14px;
      background: #2a7b9b;
      background: linear-gradient(
        90deg,
        rgba(42, 123, 155, 1) 0%,
        rgba(50, 140, 85, 1) 50%,
        rgba(193, 83, 237, 1) 100%
      );
    }
  }

  #mobile-surprise {
    display: block;
    color: rgba(42, 123, 155, 1);
    font-size: 14px;

    @media screen and ((max-width: 768px) or (max-height: 500px)) {
      display: none;
    }
  }
</style>

<script>
  import headshotParty from "../assets/headshot-party.png";
  import confetti from "canvas-confetti";

  const orientationListener = function (e: DeviceOrientationEvent) {
    requestAnimationFrame(() => {
      const headshot = document.getElementById("headshot");
      const bouncingIcons = document.getElementsByClassName("bouncing-icon");
      if (headshot) {
        const rotateZ = e.gamma ?? 0; // left to right
        headshot.style.transform = `rotate(${360 - rotateZ}deg)`;
        
        Array.from(bouncingIcons).forEach((icon) => {
          (icon as HTMLElement).style.transform = `rotate(${rotateZ}deg)`;
        });
      }
    });
  };
  interface DeviceOrientationEventiOS extends DeviceOrientationEvent {
    requestPermission?: () => Promise<"granted" | "denied">;
  }
  document.getElementById("enable-rotation")?.addEventListener("click", () => {
    const deviceOrientationEvent =
      window.DeviceOrientationEvent as unknown as DeviceOrientationEventiOS;
    if (deviceOrientationEvent.requestPermission) {
      // iOS
      deviceOrientationEvent
        .requestPermission()
        .then((response) => {
          if (response === "granted") {
            window.addEventListener(
              "deviceorientation",
              orientationListener,
              false
            );
          } else {
            alert("Permission not granted to access device orientation");
          }
        })
        .catch(console.error);
    } else if (window.DeviceOrientationEvent) {
      window.addEventListener("deviceorientation", orientationListener, false);
    }
    (
      document.getElementById("enable-rotation") as HTMLButtonElement
    ).style.visibility = "hidden";
    const headshot = document.getElementById("headshot") as HTMLImageElement;
    headshot.src = headshotParty.src;

    // confetti
    var duration = 5 * 1000;
    var animationEnd = Date.now() + duration;
    var defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    function randomInRange(min: number, max: number) {
      return Math.random() * (max - min) + min;
    }

    var interval = setInterval(function () {
      var timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        return clearInterval(interval);
      }

      var particleCount = 50 * (timeLeft / duration);
      // since particles fall down, start a bit higher than random
      confetti({
        ...defaults,
        particleCount,
        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
      });
      confetti({
        ...defaults,
        particleCount,
        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
      });
    }, 250);
  });
</script>
